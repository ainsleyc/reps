
### Responsive Web Design

* Viewport
  * Instructs browser to match the screen's width with device-independent pixels
```
<meta name="viewport" content="width=device-width, initial-scale=1">
```

* Media queries
  * Allows application of different styles based on device characteristics
  * Apply different styles at different widths

* Content Width
  * Users are used to scrolling up and down, but not horizontally
  * Don't rely os specific viewport width
  * Don't use large fixed width elements, use relative widths
  * Design for smallest screens, and work your way up
  * Keep text to a maximum of ~70 lines

* Homepage
  * Place actions at top/center of page
  * Tell users what orientiation to use
  * Keep menu lists short
  * Always include links to return to the homepage (ex logo link)
  * Avoid opening new browser windows

* Responsive Design Patterns
  * Fluid Grid Reflow
    * Stack columns vertically as width decreases
    * Each content column reflows
  * Column Drop
    * For full width multi-column layouts, columns become stacked vertically as width decreases
  * Layout Shifter
    * Custom layout modification at each breakpoint
    * More complex, requires changes within elements not just layout
  * Tiny Tweaks
    * For text-heavy, single column  pages, just tweaking fint suze and such may be enough.
  * Off Canvas
    * Less important columns are shifted off screen, swipeable left and right.

* Mobile Web Navigation
  * App Bar
    * Homepage logo
    * Menu button on top left or top right of screen
    * Key actions should be in the app bar
  * Tab Bar
    * Only if site has no more than 5 sections
    * Below or above main content
    * Make it clear which section is currently selected 
  * Navigation Drawer
    * Off canvas, for if there are many sections
    * Should always be easily accessable
    * Don't hide key actions in the drawer
  * Bottom Bar
    * If app bar cannot hold all actions
    * 5 items at most
    * Conflicts with Tab Bar

* Search
  * Make sure search is visible
  * Ensure search results are relevent
  * Implment filters to narrow results
  * Guide users to better search results

* Form Entry
  * Use HTML5 input types
  * Take advantage of autofill
  * Progress indicator for multi-step forms
  * Use a calendar for dates
  * Use labels, which allow users to touch them to access the input field
  * Use placeholders to demonstrate expected input
  * Use browser autocomplete values
  * Pattern attribute on fields allows regex validation
  * Required attribute must be filled before form can be submitted
  * Use real-time validation of fields to let user know when inputs are invalid before submit
